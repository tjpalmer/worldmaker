!function(e){function n(o){if(t[o])return t[o].exports;var r=t[o]={exports:{},id:o,loaded:!1};return e[o].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}var t={};return n.m=e,n.c=t,n.p="",n(0)}([function(e,n,t){"use strict";function o(){var e=new r.Stage;new r.Toolbox(document.body,e),e.start()}var r=t(1);t(9),window.onload=o},function(e,n,t){"use strict";function o(e){for(var t in e)n.hasOwnProperty(t)||(n[t]=e[t])}o(t(3)),o(t(4)),o(t(5))},function(e,n){e.exports=THREE},function(e,n,t){"use strict";var o=t(2),r=function(){function e(e){var n=this;this.active=!1,this.last=new o.Vector2,this.radius=e.camera.position.length(),this.stage=e;var t=e.renderer.domElement;t.addEventListener("mousedown",function(e){return n.mouseDown(e)}),window.addEventListener("mousemove",function(e){return n.mouseMove(e)}),window.addEventListener("mouseup",function(e){return n.mouseUp(e)}),t.addEventListener("wheel",function(e){return n.wheel(e)})}return e.prototype.altitude=function(){return this.radius-this.surface()},e.prototype.calculateIntersection=function(e){var n=this.calculateRay(e),t=n.origin,o=n.direction,r=t.x,a=t.y,i=t.z,s=o.x,l=o.y,c=o.z,u=1,p=1,d=u*u,v=p*p,f=v*(s*s+l*l)+d*c*c,h=v*(s*r+l*a)+d*c*i,x=v*(r*r+a*a-d)+d*i*i,m=-1/f*(h+Math.sqrt(h*h-f*x)),y=Number.isNaN(m)?void 0:t.add(o.multiplyScalar(m));return y},e.prototype.calculateRay=function(e){var n=new o.Raycaster;return e=e.clone().divide(new o.Vector2(this.stage.renderer.domElement.offsetWidth,this.stage.renderer.domElement.offsetHeight)).multiplyScalar(2).addScalar(-1).multiply(new o.Vector2(1,(-1))),n.setFromCamera(e,this.stage.camera),n.ray},e.prototype.mouseDown=function(e){this.calculateIntersection(new o.Vector2(e.offsetX,e.offsetY));this.last.set(e.screenX,e.screenY),this.active=!0},e.prototype.mouseMove=function(e){if(this.active){var n=new o.Vector2(e.screenX,e.screenY).sub(this.last),t=Math.min(window.innerWidth,window.innerHeight);n.divideScalar(t).multiplyScalar(Math.PI);var r=new o.Vector2(1,1).multiplyScalar(this.altitude()/3);r.y=Math.min(1,r.y),n.multiply(r);var a=this.stage.camera.position;a.applyAxisAngle(new o.Vector3(0,1,0),-n.x);var i=new o.Vector3(a.x,0,a.z);i.applyAxisAngle(new o.Vector3(0,1,0),.5*Math.PI),a.applyAxisAngle(i,-n.y),this.last.set(e.screenX,e.screenY),this.update()}},e.prototype.mouseUp=function(e){this.active=!1},e.prototype.surface=function(){return 1.1},e.prototype.update=function(){var e=this.stage.camera.position;e.normalize().multiplyScalar(this.radius),this.stage.camera.lookAt(new o.Vector3),this.stage.camera.updateMatrix(),this.stage.camera.updateProjectionMatrix(),this.stage.render()},e.prototype.wheel=function(e){var n=Math.sign(e.deltaY),t=this.surface(),o=this.radius-t;o*=1+.1*n,this.radius=o+t,console.log(this.radius),this.update()},e}();n.Control=r},function(e,n){"use strict";var t=function(){function e(e,n){for(var t=e.querySelector(".toolbox"),o=0,r=t.querySelectorAll("input");o<r.length;o++){var a=r[o],i=a;i.addEventListener("click",function(){for(var e=0,n=t.querySelectorAll("label");e<n.length;e++){var o=n[e],r=o;r.classList.remove("selected")}var a=t.querySelector("input:checked");a.closest("label").classList.add("selected")})}e.querySelector(".shuffle").addEventListener("click",function(){var e=Math.random;n.seed.set(e(),e(),e()).addScalar(-.5).multiplyScalar(2e3),n.buildTextureTarget(),n.sphere.material.needsUpdate=!0,n.render()})}return e}();n.Toolbox=t},function(e,n,t){"use strict";function o(e){var n=1.1,t=new a.Vector3(0,1,0).multiplyScalar(n),o=new a.Geometry;o.vertices.push(t,t.clone().multiplyScalar(-1));var r=new a.Line(o,new a.LineBasicMaterial({color:16711680}));e.add(r)}var r=t(1),a=t(2),i=function(){function e(){this.seed=new a.Vector3}return e.prototype.buildTextureTarget=function(){var e=this,n=new a.Scene,t=new a.ShaderMaterial({uniforms:{seed:{value:this.seed}},vertexShader:v});n.add(new a.Mesh(new a.PlaneBufferGeometry(2*Math.PI,Math.PI),t));var o=new a.OrthographicCamera((-Math.PI),Math.PI,Math.PI/2,-Math.PI/2,(-1e5),1e5);o.position.z=1;var r=0+Math.ceil(Math.log(Math.max(window.screen.width,window.screen.height))/Math.log(2)),i=new a.Vector2(Math.pow(2,r),Math.pow(2,r-1)),s=function(r,s,l){void 0===l&&(l=!1),e[r]||(e[r]=new a.WebGLRenderTarget(i.x,i.y)),t.fragmentShader=s,t.needsUpdate=!0,e.renderer.render(n,o,e[r]),l&&e.renderer.render(n,o)};s("target",u),s("elevationTarget",p),s("specularTarget",f)},e.prototype.render=function(){this.renderer.render(this.scene,this.camera)},e.prototype.resize=function(){var e=this;this.renderer.setSize(1,1),window.setTimeout(function(){var n=document.body.querySelector(".view"),t={x:n.clientWidth,y:n.clientHeight};e.camera.aspect=t.x/t.y,e.camera.updateProjectionMatrix(),e.renderer.setSize(t.x,t.y),e.scene&&e.render()},0)},e.prototype.start=function(){var e=this,n=this.renderer=new a.WebGLRenderer({antialias:!0});document.body.querySelector(".view").appendChild(n.domElement),this.camera=new a.PerspectiveCamera(35,window.innerWidth/window.innerHeight,.1,1e3),this.camera.position.z=4,window.addEventListener("resize",function(){return e.resize()}),this.resize();var t=this.scene=new a.Scene;new r.Control(this),this.buildTextureTarget();var i=new a.AmbientLight(16777215,.5);t.add(i);var s=new a.DirectionalLight(16777215,.5);s.position.set(-1,1,1),t.add(s);var l=8,u=new a.SphereBufferGeometry(1,Math.pow(2,l),Math.pow(2,l-1)),p=(new a.ShaderMaterial({fragmentShader:c,vertexShader:d}),.0139),v=new a.MeshPhongMaterial({bumpMap:this.elevationTarget.texture,bumpScale:p,displacementMap:this.elevationTarget.texture,displacementScale:p,map:this.target.texture,shininess:90,specularMap:this.specularTarget.texture}),f=this.sphere=new a.Mesh(u,v);t.add(f),o(t),this.render()},e}();n.Stage=i;var s="\n  vec3 mod289(vec3 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n  }\n\n  vec4 mod289(vec4 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n  }\n\n  vec4 permute(vec4 x) {\n      return mod289(((x*34.0)+1.0)*x);\n  }\n\n  vec4 taylorInvSqrt(vec4 r)\n  {\n    return 1.79284291400159 - 0.85373472095314 * r;\n  }\n\n  float snoise(vec3 v)\n    { \n    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n  // First corner\n    vec3 i  = floor(v + dot(v, C.yyy) );\n    vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n  // Other corners\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min( g.xyz, l.zxy );\n    vec3 i2 = max( g.xyz, l.zxy );\n\n    //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n    //   x1 = x0 - i1  + 1.0 * C.xxx;\n    //   x2 = x0 - i2  + 2.0 * C.xxx;\n    //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n    vec3 x1 = x0 - i1 + C.xxx;\n    vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n    vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n  // Permutations\n    i = mod289(i); \n    vec4 p = permute( permute( permute( \n              i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n            + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n            + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n  // Gradients: 7x7 points over a square, mapped onto an octahedron.\n  // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n    float n_ = 0.142857142857; // 1.0/7.0\n    vec3  ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n    vec4 x = x_ *ns.x + ns.yyyy;\n    vec4 y = y_ *ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4( x.xy, y.xy );\n    vec4 b1 = vec4( x.zw, y.zw );\n\n    //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n    //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n    vec4 s0 = floor(b0)*2.0 + 1.0;\n    vec4 s1 = floor(b1)*2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n    vec3 p0 = vec3(a0.xy,h.x);\n    vec3 p1 = vec3(a0.zw,h.y);\n    vec3 p2 = vec3(a1.xy,h.z);\n    vec3 p3 = vec3(a1.zw,h.w);\n\n  //Normalise gradients\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n  // Mix final noise value\n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                  dot(p2,x2), dot(p3,x3) ) );\n  }\n",l="\n  uniform vec3 seed;\n\n  varying vec3 position3d;\n\n  "+s+"\n\n  float landValue(vec3 pos);\n\n  float worldValue(vec3 pos, float offset) {\n    pos += seed;\n    float value =\n      0.5 * snoise(1.0 * pos)\n      + 0.3 * snoise(2.0 * pos)\n      + 0.2 * snoise(4.0 * pos)\n      + 0.1 * snoise(8.0 * pos)\n      // Make some places noisier than others.\n      // TODO Semi-independent noise for height of each frequency.\n      + 0.5 * (snoise(4.0 * (pos + 1e3)) + 1.2) * (\n        + 0.1 * snoise(16.0 * pos)\n        + 0.05 * snoise(32.0 * pos)\n        + 0.02 * snoise(64.0 * pos)\n      )\n    ;\n    value += offset;\n    // value = 1.0 / (exp(-5.0 * value) + 1.0);\n    // value = 2.0 * value - 1.0;\n    return value;\n  }\n\n  float iceValue(vec3 pos) {\n    float pure = 0.95;\n    float less = 0.85;\n    float none = 0.8;\n    float offset = 5.0 * (abs(pos.y) - 0.9);\n    // float offset = 1.0 * (smoothstep(less, pure, abs(pos.y)) - 0.5);\n    // offset -=\n    //   // Below less.\n    //   (1.0 - step(less, abs(pos.y))) *\n    //   // Gradually make the negative more extreme until none.\n    //   (1.0 - smoothstep(none, less, abs(pos.y)));\n    float value = worldValue(pos, offset);\n    return value;\n  }\n\n  vec4 iceColor(vec3 pos) {\n    float value = iceValue(pos);\n    float low = 0.8;\n    float gray = value + low * (1.0 - value);\n    vec3 color = vec3(gray);\n    float land = landValue(pos);\n    float alpha;\n    if (land <= 0.0) {\n      color *= vec3(0.95, 0.95, 1.0);\n      alpha = step(low, gray);\n    } else {\n      color *= 0.95;\n      alpha = smoothstep(-1.0, 1.0, (gray - 0.8) * 1e2);\n    }\n    return vec4(color, alpha);\n  }\n\n  float iceElevation(vec3 pos) {\n    // TODO Improve ice for over land vs over water.\n    vec4 ice = iceColor(pos);\n    // TODO How to avoid knowing the low gray value for ice here?\n    // TODO Would it be a uniform?\n    float elevation = (ice.x - 0.8) * 5.0;\n    float land = landValue(pos);\n    if (land <= 0.0) {\n      elevation *= 0.4;\n    }\n    return elevation;\n  }\n\n  float landValue(vec3 pos) {\n    return worldValue(pos, -0.15);\n  }\n\n  float landElevation(vec3 pos) {\n    return max(landValue(pos), 0.0);\n  }\n\n  vec4 landColor(vec3 pos) {\n    // TODO Change this into clear gradients and boundaries.\n    float value = landValue(pos);\n    float desert = worldValue(pos - 19.0, 0.05);\n    desert -= abs(abs(pos.y) - 0.35) * 2.0;\n    float forest = worldValue(pos - 39.0, 0.0);\n    float unit = 0.5 * (value + 1.0);\n    float sub = 0.5 * step(0.0, -value) + step(0.0, value);\n    float red = 0.4 * unit * sub;\n    float green = 0.8 * unit * sub;\n    float blue = 0.7 * step(0.0, -value) + 0.1 * step(0.0, value);\n    vec3 color = vec3(red, green, blue);\n    if (value > 0.0) {\n      // Colors picked from a NASA Blue Marble picture.\n      vec3 desertColor = 0.8 * vec3(216, 186, 145) / 255.0;\n      vec3 plantColor = vec3(99, 136, 45) / 255.0;\n      forest = 0.25 * smoothstep(-0.3, 0.0, forest) + 0.75;\n      plantColor *= forest;\n      desert = smoothstep(-0.15, 0.15, desert);\n      color = mix(plantColor, desertColor, desert);\n    } else {\n      color += (1.0 - color) * 0.1;\n      color *= 0.6;\n    }\n    return vec4(color, 1.0);\n  }\n\n  vec4 worldColor(vec3 pos) {\n    vec4 color = landColor(pos);\n    vec4 next = iceColor(pos);\n    color = vec4(mix(color.xyz, next.xyz, next.w), 1.0);\n    return color;\n  }\n\n  float worldElevation(vec3 pos) {\n    float elevation = landElevation(pos);\n    elevation = max(elevation, iceElevation(pos));\n    return elevation;\n  }\n\n  vec3 calcPosition3d() {\n    vec3 pos = position3d;\n    // Calculate 3D pos from x lon, y lat.\n    // First rotate up.\n    float y = sin(pos.y);\n    float r = cos(pos.y);\n    // Then rotate around.\n    vec2 xz = r * vec2(cos(pos.x), sin(pos.x));\n    pos = vec3(xz.x, y, xz.y);\n    return pos;\n  }\n",c="\n  "+l+"\n\n  void main() {\n    gl_FragColor = worldColor(position3d);\n  }\n",u="\n  "+l+"\n\n  void main() {\n    vec3 pos = calcPosition3d();\n    gl_FragColor = worldColor(pos);\n  }\n",p="\n  "+l+"\n\n  void main() {\n    vec3 pos = calcPosition3d();\n    gl_FragColor = vec4(vec3(worldElevation(pos)), 1.0);\n  }\n",d="\n  "+l+"\n\n  void main() {\n    position3d = position;\n    // Chomolungma height vs earth radius.\n    float value = 1.39e-3 * landValue(position);\n    value = max(value, 0.0);\n    vec3 shifted = (1.0 + value) * position;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(shifted, 1.0);\n  }\n",v="\n  "+l+"\n\n  void main() {\n    // Position3d is a misnomer here.\n    // We can't calculate 3d until later, or we'd lose the curve.\n    // TODO Rename?\n    position3d = position;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n",f="\n  "+l+"\n\n  void main() {\n    vec3 pos = calcPosition3d();\n    // TODO Separate explicit water function once we have land below sea.\n    float specular = step(0.0, -landValue(pos));\n    specular = iceValue(pos) > 0.0 ? 0.5 : specular;\n    gl_FragColor = vec4(vec3(specular), 1.0);\n  }\n"},function(e,n,t){n=e.exports=t(7)(),n.push([e.id,"body{align-content:stretch;align-items:stretch;background:#000;bottom:0;color:#fff;display:flex;left:0;margin:0;position:fixed;right:0;top:0}.panel{flex:0;font-size:2em}.toolbox{display:none}.toolbox i{margin-top:2em}.toolbox input{display:none}.panel>*{border:.1em solid #000;padding:.2em .3em}.toolbox>.selected{border:.1em solid #fff;border-radius:.2em}.view{flex:1}",""])},function(e,n){e.exports=function(){var e=[];return e.toString=function(){for(var e=[],n=0;n<this.length;n++){var t=this[n];t[2]?e.push("@media "+t[2]+"{"+t[1]+"}"):e.push(t[1])}return e.join("")},e.i=function(n,t){"string"==typeof n&&(n=[[null,n,""]]);for(var o={},r=0;r<this.length;r++){var a=this[r][0];"number"==typeof a&&(o[a]=!0)}for(r=0;r<n.length;r++){var i=n[r];"number"==typeof i[0]&&o[i[0]]||(t&&!i[2]?i[2]=t:t&&(i[2]="("+i[2]+") and ("+t+")"),e.push(i))}},e}},function(e,n,t){function o(e,n){for(var t=0;t<e.length;t++){var o=e[t],r=v[o.id];if(r){r.refs++;for(var a=0;a<r.parts.length;a++)r.parts[a](o.parts[a]);for(;a<o.parts.length;a++)r.parts.push(c(o.parts[a],n))}else{for(var i=[],a=0;a<o.parts.length;a++)i.push(c(o.parts[a],n));v[o.id]={id:o.id,refs:1,parts:i}}}}function r(e){for(var n=[],t={},o=0;o<e.length;o++){var r=e[o],a=r[0],i=r[1],s=r[2],l=r[3],c={css:i,media:s,sourceMap:l};t[a]?t[a].parts.push(c):n.push(t[a]={id:a,parts:[c]})}return n}function a(e,n){var t=x(),o=w[w.length-1];if("top"===e.insertAt)o?o.nextSibling?t.insertBefore(n,o.nextSibling):t.appendChild(n):t.insertBefore(n,t.firstChild),w.push(n);else{if("bottom"!==e.insertAt)throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");t.appendChild(n)}}function i(e){e.parentNode.removeChild(e);var n=w.indexOf(e);n>=0&&w.splice(n,1)}function s(e){var n=document.createElement("style");return n.type="text/css",a(e,n),n}function l(e){var n=document.createElement("link");return n.rel="stylesheet",a(e,n),n}function c(e,n){var t,o,r;if(n.singleton){var a=y++;t=m||(m=s(n)),o=u.bind(null,t,a,!1),r=u.bind(null,t,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=l(n),o=d.bind(null,t),r=function(){i(t),t.href&&URL.revokeObjectURL(t.href)}):(t=s(n),o=p.bind(null,t),r=function(){i(t)});return o(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;o(e=n)}else r()}}function u(e,n,t,o){var r=t?"":o.css;if(e.styleSheet)e.styleSheet.cssText=g(n,r);else{var a=document.createTextNode(r),i=e.childNodes;i[n]&&e.removeChild(i[n]),i.length?e.insertBefore(a,i[n]):e.appendChild(a)}}function p(e,n){var t=n.css,o=n.media;if(o&&e.setAttribute("media",o),e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}function d(e,n){var t=n.css,o=n.sourceMap;o&&(t+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var r=new Blob([t],{type:"text/css"}),a=e.href;e.href=URL.createObjectURL(r),a&&URL.revokeObjectURL(a)}var v={},f=function(e){var n;return function(){return"undefined"==typeof n&&(n=e.apply(this,arguments)),n}},h=f(function(){return/msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase())}),x=f(function(){return document.head||document.getElementsByTagName("head")[0]}),m=null,y=0,w=[];e.exports=function(e,n){n=n||{},"undefined"==typeof n.singleton&&(n.singleton=h()),"undefined"==typeof n.insertAt&&(n.insertAt="bottom");var t=r(e);return o(t,n),function(e){for(var a=[],i=0;i<t.length;i++){var s=t[i],l=v[s.id];l.refs--,a.push(l)}if(e){var c=r(e);o(c,n)}for(var i=0;i<a.length;i++){var l=a[i];if(0===l.refs){for(var u=0;u<l.parts.length;u++)l.parts[u]();delete v[l.id]}}}};var g=function(){var e=[];return function(n,t){return e[n]=t,e.filter(Boolean).join("\n")}}()},function(e,n,t){var o=t(6);"string"==typeof o&&(o=[[e.id,o,""]]);t(8)(o,{});o.locals&&(e.exports=o.locals)}]);